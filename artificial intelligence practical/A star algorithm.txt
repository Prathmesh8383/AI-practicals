import heapq

class Node:
    def __init__(self, state, parent=None, action=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost
        self.heuristic = heuristic
        self.total_cost = cost + heuristic

    def __lt__(self, other):
        return self.total_cost < other.total_cost

def a_star_search(initial_state, goal_state, get_successors, heuristic):
    open_list = []
    closed_set = set()
    initial_node = Node(initial_state, cost=0, heuristic=heuristic(initial_state))
    heapq.heappush(open_list, initial_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal_state:
            return get_path(current_node)

        closed_set.add(current_node.state)

        successors = get_successors(current_node.state)
        for successor_state, action, step_cost in successors:
            if successor_state in closed_set:
                continue

            successor_node = Node(successor_state,
                                  parent=current_node,
                                  action=action,
                                  cost=current_node.cost + step_cost,
                                  heuristic=heuristic(successor_state))

            if is_node_in_list(open_list, successor_node):
                continue

            heapq.heappush(open_list, successor_node)

    return None

def get_path(node):
    path = []
    current_node = node
    while current_node.parent:
        path.append((current_node.state, current_node.action))
        current_node = current_node.parent
    path.reverse()
    return path

def is_node_in_list(node_list, target_node):
    for node in node_list:
        if node.state == target_node.state and node.total_cost <= target_node.total_cost:
            return True
    return False
