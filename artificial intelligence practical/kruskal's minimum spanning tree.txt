class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)

        if x_root == y_root:
            return

        if self.rank[x_root] < self.rank[y_root]:
            self.parent[x_root] = y_root
        elif self.rank[x_root] > self.rank[y_root]:
            self.parent[y_root] = x_root
        else:
            self.parent[y_root] = x_root
            self.rank[x_root] += 1

def greedy_search_kruskal_minimum_spanning_tree(graph):
    edges = []
    for u in range(len(graph)):
        for v in range(u + 1, len(graph)):
            if graph[u][v] != float('inf'):
                edges.append((u, v, graph[u][v]))

    edges.sort(key=lambda x: x[2]) 

    minimum_spanning_tree = []
    union_find = UnionFind(len(graph))

    for u, v, weight in edges:
        if union_find.find(u) != union_find.find(v):
            union_find.union(u, v)
            minimum_spanning_tree.append((u, v, weight))

    return minimum_spanning_tree


graph = [
    [0, 2, 1, float('inf')],
    [2, 0, 3, 1],
    [1, 3, 0, 4],
    [float('inf'), 1, 4, 0]
]

minimum_spanning_tree = greedy_search_kruskal_minimum_spanning_tree(graph)

print("Minimum Spanning Tree:")
for u, v, weight in minimum_spanning_tree:
    print(f"Edge: {u}-{v}, Weight: {weight}")
