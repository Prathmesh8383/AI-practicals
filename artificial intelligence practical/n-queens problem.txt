def is_safe(board, row, col, n):
   
    for i in range(row):
        if board[i][col] == 1:
            return False

    i = row
    j = col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

   
    i = row
    j = col
    while i >= 0 and j < n:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True

def solve_n_queens_util(board, row, n, solutions):
    if row == n:
        
        solutions.append(board.copy())
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1

            solve_n_queens_util(board, row + 1, n, solutions)

            board[row][col] = 0 

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    solutions = []

    solve_n_queens_util(board, 0, n, solutions)

    return solutions


n = 4
solutions = solve_n_queens(n)

print(f"Total solutions for {n}-Queens problem:", len(solutions))
for idx, solution in enumerate(solutions):
    print(f"\nSolution {idx+1}:")
    for row in solution:
        print(' '.join(str(cell) for cell in row))
